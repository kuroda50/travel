import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:travel/colors/color.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter/gestures.dart';
import 'package:travel/component/header.dart';

class AccountCreateScreen extends StatefulWidget {
  @override
  _SignupFormState createState() => _SignupFormState();
}

class _SignupFormState extends State<AccountCreateScreen> {
  double widthFactor = 1; // „Éï„Ç£„Éº„É´„Éâ„ÅÆÂπÖ„ÇíË™øÊï¥„Åô„Çã‰øÇÊï∞
  double headerHeight = 88; // „Éò„ÉÉ„ÉÄ„Éº„ÅÆÁ∏¶„ÅÆÂ§ß„Åç„Åï
  final _formKey = GlobalKey<FormState>();
  String? _selectedGender, _genderError, _birthdayError;
  bool isEmailUsed = false;
  DateTime? _birthday;
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _passwordCheckController =
      TextEditingController();

  @override
  void dispose() {
    // „É°„É¢„É™„É™„Éº„ÇØ„ÇíÈò≤„Åê„Åü„ÇÅ„Å´dispose()„ÅßÁ†¥Ê£Ñ
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _passwordCheckController.dispose();
    super.dispose();
  }

  void printTextField() {
    setState(() {
      _genderError = _selectedGender == null ? 'ÊÄßÂà•„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ' : null;
      _birthdayError = (_selectedYear == null ||
              _selectedMonth == null ||
              _selectedDay == null)
          ? 'Ë™ïÁîüÊó•„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
          : null;
    });
  }

  void signUp() async {
    try {
      if (_formKey.currentState!.validate() && _genderError == null) {
        _birthday = DateTime(_selectedYear!, _selectedMonth!, _selectedDay!);
        UserCredential credential =
            await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text,
          password: _passwordController.text,
        );
        // „É°„Éº„É´Ë™çË®º„ÇíÈÄÅ‰ø°
        await credential.user!.sendEmailVerification();

        String uid = credential.user!.uid;
        await FirebaseFirestore.instance.collection("users").doc(uid).set({
          "iconURL": "",
          "photoURLs": [""],
          "uploadedAt": FieldValue.serverTimestamp(),
          "hasPhoto": false,
          "name": _nameController.text,
          "gender": _selectedGender,
          "birthday": _birthday,
          "hobbies": [],
          "bio": "",
          "createdAt": FieldValue.serverTimestamp(),
          "updatedAt": FieldValue.serverTimestamp(),
          "following": [],
          "followers": [],
          "favoritePosts": [],
          "participatedPosts": [],
          "chatRooms": [],
          "isDeleted": false,
        });

        // „Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàêÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("„Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"),
            backgroundColor: Colors.green,
          ),
        );
        // „É≠„Ç∞„Ç§„É≥ÁîªÈù¢„Å´ÈÅ∑Áßª
        context.go('/login');
      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        print('The password provided is too weak.');
      } else if (e.code == 'email-already-in-use') {
        print('The account already exists for that email.');
        setState(() {
          isEmailUsed = true;
        });
      }
    } catch (e) {
      print(e);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const Header(
        title: "„Ç¢„Ç´„Ç¶„É≥„Éà‰ΩúÊàê",
      ),
      backgroundColor: AppColor.subBackgroundColor,
      body: LayoutBuilder(
        builder: (context, constraints) {
          double formWidth = constraints.maxWidth > 400
              ? 390
              : constraints.maxWidth * widthFactor;

          return Center(
            child: SingleChildScrollView(
                child: ConstrainedBox(
              constraints: BoxConstraints(
                maxWidth: 600, // üîÑ ÊúÄÂ§ß600pxÔºà„Çπ„Éû„ÉõÂπÖ„Å´Âõ∫ÂÆöÔºâ
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    width: formWidth,
                    padding: const EdgeInsets.all(22),
                    decoration: const BoxDecoration(color: Color(0xFF)), //Âæå„ÇçËâ≤
                    child: Container(
                        padding: const EdgeInsets.all(19),
                        decoration: BoxDecoration(
                          color: AppColor.subBackgroundColor, //„Åß„Åã„ÅÑÂõõËßí„ÅÆËâ≤
                          borderRadius: BorderRadius.circular(7),
                        ),
                        child: Form(
                          key: _formKey,
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              const SizedBox(height: 17),
                              const Text('„Éó„É≠„Éï„Ç£„Éº„É´„ÇíË®≠ÂÆö„Åó„Åæ„Åó„Çá„ÅÜ',
                                  style: TextStyle(
                                      fontSize: 16, color: Colors.black87)),
                              const SizedBox(height: 17),
                              const Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  'ÂêçÂâç',
                                  style: TextStyle(
                                      fontSize: 13, color: Colors.black87),
                                ),
                              ),
                              _buildLabeledTextField('name', formWidth),
                              const SizedBox(height: 17),
                              _buildGenderSelection(),
                              const SizedBox(height: 17),
                              _buildBirthDateFields(formWidth),
                              const SizedBox(height: 17),
                              const Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  'ÈõªÂ≠ê„É°„Éº„É´',
                                  style: TextStyle(
                                      fontSize: 13, color: Colors.black87),
                                ),
                              ),
                              _buildLabeledTextField(
                                'mail',
                                formWidth,
                              ),
                              const SizedBox(height: 17),
                              const Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  '„Éë„Çπ„ÉØ„Éº„Éâ',
                                  style: TextStyle(
                                      fontSize: 13, color: Colors.black87),
                                ),
                              ),
                              _buildLabeledTextField(
                                'password',
                                formWidth,
                              ),
                              const SizedBox(height: 17),
                              const Align(
                                alignment: Alignment.centerLeft,
                                child: Text(
                                  '„Éë„Çπ„ÉØ„Éº„ÉâÔºàÁ¢∫Ë™çÁî®Ôºâ',
                                  style: TextStyle(
                                      fontSize: 13, color: Colors.black87),
                                ),
                              ),
                              _buildLabeledTextField(
                                'passwordCheck',
                                formWidth,
                              ),
                              const SizedBox(height: 17),
                              ElevatedButton(
                                onPressed: () async {
                                  printTextField();
                                  signUp();
                                },
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Color(0xFF559900),
                                ),
                                child: const Text('‰ºöÂì°„Å´„Å™„Çã',
                                    style: TextStyle(color: Colors.white)),
                              ),
                              const SizedBox(height: 10),
                              RichText(
                                text: TextSpan(
                                  style: const TextStyle(
                                      fontSize: 10, color: Colors.black87),
                                  children: [
                                    const TextSpan(text: '‰ºöÂì°„Å´„Å™„Çã„Å® '),
                                    TextSpan(
                                      text: 'Âà©Áî®Ë¶èÁ¥Ñ„Åä„Çà„Å≥„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº',
                                      style: const TextStyle(
                                        color: Colors.lightBlue,
                                        decoration: TextDecoration.underline,
                                        decorationColor: Colors.black,
                                        decorationThickness: 1.5,
                                      ),
                                      recognizer: TapGestureRecognizer()
                                        ..onTap = () {
                                          context.push('/terms-of-use');
                                        },
                                    ),
                                    const TextSpan(text: ' „Å´ÂêåÊÑè„Åó„Åü„ÇÇ„ÅÆ„Å®„Åø„Å™„Åï„Çå„Åæ„Åô'),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        )),
                  ),
                ],
              ),
            )),
          );
        },
      ),
    );
  }

  // ÂêÑ„Éï„Ç£„Éº„É´„Éâ„ÅÆ„Éë„Çπ„ÉØ„Éº„ÉâË°®Á§∫Áä∂ÊÖã„ÇíÁÆ°ÁêÜ
  Map<String, bool> isObscuredMap = {
    'password': true,
    'passwordCheck': true,
  };

  Widget _buildLabeledTextField(String textFieldType, double width) {
    return SizedBox(
      width: width * 0.9,
      child: StatefulBuilder(
        builder: (context, setState) {
          return TextFormField(
            controller: textFieldType == 'name'
                ? _nameController
                : textFieldType == 'mail'
                    ? _emailController
                    : textFieldType == 'password'
                        ? _passwordController
                        : _passwordCheckController,
            obscureText: isObscuredMap[textFieldType] ?? false,
            keyboardType: textFieldType == 'mail'
                ? TextInputType.emailAddress
                : TextInputType.text,
            decoration: InputDecoration(
              border: const OutlineInputBorder(),
              labelStyle: const TextStyle(color: Color(0xFFE0E0E0)),
              contentPadding:
                  const EdgeInsets.symmetric(vertical: 12, horizontal: 10),
              suffixIcon: (textFieldType == 'password' ||
                      textFieldType == 'passwordCheck')
                  ? IconButton(
                      icon: Icon(
                        isObscuredMap[textFieldType]!
                            ? Icons.visibility_off
                            : Icons.visibility,
                        color: Colors.grey,
                      ),
                      onPressed: () {
                        setState(() {
                          isObscuredMap[textFieldType] =
                              !isObscuredMap[textFieldType]!;
                        });
                      },
                    )
                  : null,
            ),
            validator: (value) {
              switch (textFieldType) {
                case 'name':
                  if (value == null || value.isEmpty) {
                    return 'ÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                  }
                  break;
                case 'mail':
                  if (value == null || value.isEmpty) {
                    return '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
                    return 'ÊúâÂäπ„Å™„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (isEmailUsed) {
                    setState(() {
                      isEmailUsed = false;
                    });
                    return '„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô';
                  }
                  break;
                case 'password':
                  if (value == null || value.isEmpty) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6 &&
                      !RegExp(r'[a-z]').hasMatch(value) &&
                      !RegExp(r'[0-9]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÄÅ\nÂ∞èÊñáÂ≠ó„ÉªÊï∞Â≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6 &&
                      !RegExp(r'[A-Z]').hasMatch(value) &&
                      !RegExp(r'[0-9]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÄÅ\nÂ§ßÊñáÂ≠ó„ÉªÊï∞Â≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6 &&
                      !RegExp(r'[A-Z]').hasMatch(value) &&
                      !RegExp(r'[a-z]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÄÅ\nÂ§ßÊñáÂ≠ó„ÉªÂ∞èÊñáÂ≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6 &&
                      !RegExp(r'[A-Z]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÄÅ\nÂ§ßÊñáÂ≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6 &&
                      !RegExp(r'[a-z]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÄÅ\nÂ∞èÊñáÂ≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6 &&
                      !RegExp(r'[0-9]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÄÅ\nÊï∞Â≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value.length < 6 &&
                      (!RegExp(r'[A-Z]').hasMatch(value) ||
                          !RegExp(r'[a-z]').hasMatch(value)) &&
                      !RegExp(r'[0-9]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÄÅ\nÂ§ßÊñáÂ≠ó„ÉªÂ∞èÊñáÂ≠ó„ÉªÊï∞Â≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (!RegExp(r'[A-Z]').hasMatch(value) &&
                      !RegExp(r'[a-z]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÂ§ßÊñáÂ≠ó„ÉªÂ∞èÊñáÂ≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (!RegExp(r'[A-Z]').hasMatch(value) &&
                      !RegExp(r'[0-9]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÂ§ßÊñáÂ≠ó„ÉªÊï∞Â≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (!RegExp(r'[a-z]').hasMatch(value) &&
                      !RegExp(r'[0-9]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÂ∞èÊñáÂ≠ó„ÉªÊï∞Â≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (!RegExp(r'[0-9]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÊï∞Â≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (!RegExp(r'[A-Z]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÂ§ßÊñáÂ≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (!RegExp(r'[a-z]').hasMatch(value)) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„ÅØÂ∞èÊñáÂ≠ó„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ';
                  }

                  break;
                case 'passwordCheck':
                  if (value == null || value.isEmpty) {
                    return 'Á¢∫Ë™çÁî®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
                  } else if (value != _passwordController.text) {
                    return '„Éë„Çπ„ÉØ„Éº„Éâ„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì';
                  }
                  break;
              }
              return null;
            },
          );
        },
      ),
    );
  }

  Widget _buildGenderSelection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'ÊÄß',
          style: TextStyle(fontSize: 13, color: Colors.black87),
        ),
        const SizedBox(height: 4),
        Align(
          alignment: Alignment.centerLeft,
          child: ToggleButtons(
            isSelected: [
              _selectedGender == 'female',
              _selectedGender == 'male'
            ],
            onPressed: (int index) {
              setState(() {
                _selectedGender = index == 0 ? 'female' : 'male';
                _genderError = null;
              });
            },
            borderRadius: BorderRadius.circular(7),
            selectedColor: Colors.white, // ÈÅ∏ÊäûÊôÇ„ÅÆÊñáÂ≠óËâ≤
            fillColor: Colors.green, // ÈÅ∏ÊäûÊôÇ„ÅÆËÉåÊôØËâ≤
            borderColor: Colors.black87, // Êû†Á∑ö„ÅÆËâ≤
            borderWidth: 0.6, // Êû†Á∑ö„ÅÆÂ§™„Åï
            children: const [
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 12),
                child: Row(
                  children: [
                    Icon(Icons.female, color: Colors.red),
                    SizedBox(width: 4),
                    Text('Â•≥ÊÄß',
                        style: TextStyle(color: Colors.black87)), // Text„ÅÆËâ≤„ÇÇÂ§âÊõ¥
                  ],
                ),
              ),
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 12),
                child: Row(
                  children: [
                    Icon(Icons.male, color: Colors.blue),
                    SizedBox(width: 4),
                    Text('Áî∑ÊÄß',
                        style: TextStyle(color: Colors.black87)), // Text„ÅÆËâ≤„ÇÇÂ§âÊõ¥
                  ],
                ),
              ),
            ],
          ),
        ),
        if (_genderError != null) // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
          Padding(
            padding: const EdgeInsets.only(top: 5),
            child: Text(
              _genderError!,
              style:
                  const TextStyle(color: AppColor.warningColor, fontSize: 12),
            ),
          ),
      ],
    );
  }

  int? _selectedYear;
  int? _selectedMonth;
  int? _selectedDay;

  List<int> _generateYears() {
    List<int> years = [];
    for (int i = 2007; i >= 1933; i--) {
      years.add(i);
    }
    return years;
  }

  int _getDaysInMonth(int year, int month) {
    if (month == 2) {
      if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
        return 29; // „ÅÜ„Çã„ÅÜÂπ¥
      } else {
        return 28;
      }
    } else if ([4, 6, 9, 11].contains(month)) {
      return 30;
    } else {
      return 31;
    }
  }

  Widget _buildBirthDateFields(double width) {
    List<int> years = _generateYears();
    List<int> months = List.generate(12, (index) => index + 1);
    int daysInMonth = 31; // „Éá„Éï„Ç©„É´„Éà„ÅØ31Êó•
    if (_selectedYear != null && _selectedMonth != null) {
      daysInMonth = _getDaysInMonth(_selectedYear!, _selectedMonth!);
    }
    List<int> days = List.generate(daysInMonth, (index) => index + 1);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Ë™ïÁîüÊó•',
          style: TextStyle(fontSize: 13, color: Colors.black87),
        ),
        const SizedBox(height: 4),
        Row(
          children: [
            //// Âπ¥
            Expanded(
              child: DropdownButtonFormField<int>(
                value: _selectedYear,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'Âπ¥',
                  contentPadding:
                      EdgeInsets.symmetric(vertical: 12, horizontal: 10),
                ),
                items: years.map((year) {
                  return DropdownMenuItem<int>(
                    value: year,
                    child: Text(year.toString()),
                  );
                }).toList(),
                onChanged: (int? newValue) {
                  setState(() {
                    _selectedYear = newValue;
                    // Âπ¥„ÅåÂ§â„Çè„Å£„Åü„Çâ„ÄÅÊó•„Çí„É™„Çª„ÉÉ„ÉàÔºà„ÅÜ„Çã„ÅÜÂπ¥„ÇíÂÜçË®àÁÆó„Åô„Çã„Åü„ÇÅÔºâ
                    _selectedDay = null;
                  });
                },
              ),
            ),
            const SizedBox(width: 8),

            // Êúà
            Expanded(
              child: DropdownButtonFormField<int>(
                value: _selectedMonth,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'Êúà',
                  contentPadding:
                      EdgeInsets.symmetric(vertical: 12, horizontal: 10),
                ),
                items: months.map((month) {
                  return DropdownMenuItem<int>(
                    value: month,
                    child: Text(month.toString()),
                  );
                }).toList(),
                onChanged: (int? newValue) {
                  setState(() {
                    _selectedMonth = newValue;
                    // Êúà„ÅåÂ§â„Çè„Å£„Åü„Çâ„ÄÅÊó•„Çí„É™„Çª„ÉÉ„ÉàÔºàÊó•Êï∞„ÇíÂÜçË®àÁÆó„Åô„Çã„Åü„ÇÅÔºâ
                    _selectedDay = null;
                  });
                },
              ),
            ),
            const SizedBox(width: 8),

            // Êó•
            Expanded(
              child: DropdownButtonFormField<int>(
                value: _selectedDay,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: 'Êó•',
                  contentPadding:
                      EdgeInsets.symmetric(vertical: 12, horizontal: 10),
                ),
                items: days.map((day) {
                  return DropdownMenuItem<int>(
                    value: day,
                    child: Text(day.toString()),
                  );
                }).toList(),
                onChanged: (int? newValue) {
                  setState(() {
                    _selectedDay = newValue;
                    _birthdayError = null;
                  });
                },
              ),
            ),
          ],
        ),
        if (_birthdayError != null) // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
          Padding(
            padding: const EdgeInsets.only(top: 5),
            child: Text(
              _birthdayError!,
              style:
                  const TextStyle(color: AppColor.warningColor, fontSize: 12),
            ),
          ),
        const SizedBox(height: 8),
        const Text(
          'Ë™ïÁîüÊó•„ÅØÂπ¥ÈΩ¢„ÅÆË®àÁÆó„Å´‰ΩøÁî®„Åï„Çå„ÄÅ‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„Å´„ÅØË°®Á§∫„Åï„Çå„Åæ„Åõ„Çì',
          style: TextStyle(
            fontSize: 12,
            color: Colors.black,
          ),
        ),
      ],
    );
  }
}
